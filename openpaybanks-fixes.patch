diff --git a/Controller/Index/Webhook.php b/Controller/Index/Webhook.php
index 300315b..104d692 100644
--- a/Controller/Index/Webhook.php
+++ b/Controller/Index/Webhook.php
@@ -83,10 +83,10 @@ class Webhook extends \Magento\Framework\App\Action\Action implements CsrfAwareA
                     $invoice->register();
                     $invoice->save();
                     
-                }else if($json->type == 'transaction.expired' && $charge->status == 'cancelled'){
+                } else if(($json->type == 'charge.failed' || $json->type == 'transaction.expired') && $charge->status == 'cancelled'){
                     $status = \Magento\Sales\Model\Order::STATE_CANCELED;
                     $order->setState($status)->setStatus($status);
-                    $order->addStatusHistoryComment("Pago vencido")->setIsCustomerNotified(true);            
+                    $order->addStatusHistoryComment("Pago Cancelado")->setIsCustomerNotified(true);            
                     $order->save();
                 }  
             }       
diff --git a/Controller/Pse/Confirm.php b/Controller/Pse/Confirm.php
index a0517dd..f9c96ff 100644
--- a/Controller/Pse/Confirm.php
+++ b/Controller/Pse/Confirm.php
@@ -89,47 +89,49 @@ class Confirm extends \Magento\Framework\App\Action\Action
             }
             
             $this->logger->debug('#PSE', array('id' => $this->request->getParam('id'), 'status' => $charge->status));
-            if ($order && $charge->status != 'completed') {
-                $order->cancel();
-                $order->addStatusToHistory(\Magento\Sales\Model\Order::STATE_CANCELED, __('Autenticación de 3D Secure fallida.'));
-                $order->save();
-                $this->logger->debug('#PSE', array('msg' => 'Pago vía PSE fallido'));
-                                
-                return $this->resultPageFactory->create();        
-            }
-            
-            $status = \Magento\Sales\Model\Order::STATE_PROCESSING;            
-            $order->setExtOrderId($this->request->getParam('id')); // Registra el ID de la transacción de Openpay
-            $order->setState($status)->setStatus($status);
-            $order->setTotalPaid($charge->amount);  
-            $order->addStatusHistoryComment("Pago recibido exitosamente")->setIsCustomerNotified(true);            
-            $order->save();        
-            $requiresInvoice = true;
-            /** @var InvoiceCollection $invoiceCollection */
-            $invoiceCollection = $order->getInvoiceCollection();
-            if ( $invoiceCollection->count() > 0 ) {
-                /** @var Invoice $invoice */
-                foreach ($invoiceCollection as $invoice ) {
-                    if ( $invoice->getState() == Invoice::STATE_OPEN) {
-                        $invoice->setState(Invoice::STATE_PAID);
+            if($order){
+                if($charge->status == 'completed'){
+                    $status = \Magento\Sales\Model\Order::STATE_PROCESSING;            
+                    $order->setExtOrderId($this->request->getParam('id')); // Registra el ID de la transacción de Openpay
+                    $order->setState($status)->setStatus($status);
+                    $order->setTotalPaid($charge->amount);  
+                    $order->addStatusHistoryComment("Pago recibido exitosamente")->setIsCustomerNotified(true);            
+                    $order->save();        
+                    $requiresInvoice = true;
+                    /** @var InvoiceCollection $invoiceCollection */
+                    $invoiceCollection = $order->getInvoiceCollection();
+                    if ( $invoiceCollection->count() > 0 ) {
+                        /** @var Invoice $invoice */
+                        foreach ($invoiceCollection as $invoice ) {
+                            if ( $invoice->getState() == Invoice::STATE_OPEN) {
+                                $invoice->setState(Invoice::STATE_PAID);
+                                $invoice->setTransactionId($charge->id);
+                                $invoice->pay()->save();
+                                $requiresInvoice = false;
+                                break;
+                            }
+                        }
+                    }
+                    if ( $requiresInvoice ) {
+                        $invoice = $this->_invoiceService->prepareInvoice($order);
                         $invoice->setTransactionId($charge->id);
+                        //$invoice->setRequestedCaptureCase(\Magento\Sales\Model\Order\Invoice::CAPTURE_ONLINE);
+                        //$invoice->register();
                         $invoice->pay()->save();
-                        $requiresInvoice = false;
-                        break;
                     }
+                    $payment = $order->getPayment();                                
+                    $payment->setAmountPaid($charge->amount);
+                    $payment->setIsTransactionPending(false);
+                    $payment->save();
+                } else if ($charge->status == 'cancelled' || $charge->status == 'failed') {
+                    $order->cancel();
+                    $order->addStatusToHistory(\Magento\Sales\Model\Order::STATE_CANCELED, __('Pago vía PSE fallido'));
+                    $order->save();
+                    $this->logger->debug('#PSE', array('msg' => 'Pago vía PSE fallido'));
+                                    
+                    return $this->resultPageFactory->create();        
                 }
             }
-            if ( $requiresInvoice ) {
-                $invoice = $this->_invoiceService->prepareInvoice($order);
-                $invoice->setTransactionId($charge->id);
-//            $invoice->setRequestedCaptureCase(\Magento\Sales\Model\Order\Invoice::CAPTURE_ONLINE);
-//            $invoice->register();
-                $invoice->pay()->save();
-            }
-            $payment = $order->getPayment();                                
-            $payment->setAmountPaid($charge->amount);
-            $payment->setIsTransactionPending(false);
-            $payment->save();
             
             $this->logger->debug('#PSE', array('redirect' => 'checkout/onepage/success'));
             return $this->resultRedirectFactory->create()->setPath('checkout/onepage/success');
diff --git a/Model/Payment.php b/Model/Payment.php
index bfa11c9..ff8d634 100644
--- a/Model/Payment.php
+++ b/Model/Payment.php
@@ -1,5 +1,5 @@
 <?php
-/**
+/** 
  * @category    Payments
  * @package     Openpay_Banks
  * @author      Federico Balderas
@@ -12,6 +12,7 @@ namespace Openpay\Banks\Model;
 use Magento\Store\Model\ScopeInterface;
 use Magento\Customer\Model\Customer;
 use Magento\Customer\Model\Session as CustomerSession;
+use BAT\Environment\Model\Config as EnvironmentConfig;
 
 /**
  * Class Payment
@@ -44,7 +45,7 @@ class Payment extends \Magento\Payment\Model\Method\AbstractMethod
     protected $live_merchant_id;
     protected $live_sk;
     protected $pdf_url_base;
-    protected $supported_currency_codes = array('MXN');
+    protected $supported_currency_codes = array('MXN');    
     protected $_transportBuilder;
     protected $logger;
     protected $_storeManager;
@@ -52,9 +53,10 @@ class Payment extends \Magento\Payment\Model\Method\AbstractMethod
     protected $_directoryList;
     protected $_file;
     protected $iva;
+	private $environmentConfig;
 
     /**
-     *
+     * 
      * @param \Magento\Framework\Model\Context $context
      * @param \Magento\Framework\Registry $registry
      * @param \Magento\Framework\Api\ExtensionAttributesFactory $extensionFactory
@@ -74,14 +76,15 @@ class Payment extends \Magento\Payment\Model\Method\AbstractMethod
      * @param array $data
      */
     public function __construct(
-        \Magento\Framework\Model\Context $context,
+		EnvironmentConfig $environmentConfig,
+        \Magento\Framework\Model\Context $context, 
         \Magento\Framework\Registry $registry,
         \Magento\Framework\Api\ExtensionAttributesFactory $extensionFactory,
-        \Magento\Framework\Api\AttributeValueFactory $customAttributeFactory,
-        \Magento\Payment\Helper\Data $paymentData,
+        \Magento\Framework\Api\AttributeValueFactory $customAttributeFactory, 
+        \Magento\Payment\Helper\Data $paymentData, 
         \Magento\Framework\App\Config\ScopeConfigInterface $scopeConfig,
-        \Magento\Payment\Model\Method\Logger $logger,
-        Openpay\Banks\Mail\Template\TransportBuilder $transportBuilder,
+        \Magento\Payment\Model\Method\Logger $logger, 
+        \Openpay\Banks\Mail\Template\TransportBuilder $transportBuilder,
         \Magento\Framework\Translate\Inline\StateInterface $inlineTranslation,
         \Magento\Store\Model\StoreManagerInterface $storeManager,
         \Psr\Log\LoggerInterface $logger_interface,
@@ -89,23 +92,23 @@ class Payment extends \Magento\Payment\Model\Method\AbstractMethod
         \Magento\Framework\Filesystem\Io\File $file,
         \Magento\Framework\View\Asset\Repository $assetRepository,
             Customer $customerModel,
-            CustomerSession $customerSession,
+            CustomerSession $customerSession,            
             \Openpay\Cards\Model\OpenpayCustomerFactory $openpayCustomerFactory,
         array $data = []
     ) {
         parent::__construct(
             $context,
-            $registry,
+            $registry, 
             $extensionFactory,
             $customAttributeFactory,
-            $paymentData,
+            $paymentData, 
             $scopeConfig,
             $logger,
             null,
             null,
             $data
         );
-
+        $this->environmentConfig = $environmentConfig;
         $this->customerModel = $customerModel;
         $this->customerSession = $customerSession;
         $this->openpayCustomerFactory = $openpayCustomerFactory;
@@ -114,7 +117,7 @@ class Payment extends \Magento\Payment\Model\Method\AbstractMethod
         $this->_file = $file;
         $this->_directoryList = $directoryList;
         $this->logger = $logger_interface;
-        $this->_inlineTranslation = $inlineTranslation;
+        $this->_inlineTranslation = $inlineTranslation;        
         $this->_storeManager = $storeManager;
         $this->_transportBuilder = $transportBuilder;
         $this->scope_config = $scopeConfig;
@@ -122,11 +125,11 @@ class Payment extends \Magento\Payment\Model\Method\AbstractMethod
         $this->is_active = $this->getConfigData('active');
         $this->is_sandbox = $this->getConfigData('is_sandbox');
         $this->country = $this->getConfigData('country');
-
+        
         $this->sandbox_merchant_id = $this->getConfigData('sandbox_merchant_id');
         $this->sandbox_sk = $this->getConfigData('sandbox_sk');
         $this->live_merchant_id = $this->getConfigData('live_merchant_id');
-        $this->live_sk = $this->getConfigData('live_sk');
+        $this->live_sk = $this->getConfigData('live_sk');        
         $this->deadline = $this->country === 'MX' ? $this->getConfigData('deadline_hours') : null;
         $this->iva = $this->country === 'CO' ? $this->getConfigData('iva') : 0;
 
@@ -136,18 +139,18 @@ class Payment extends \Magento\Payment\Model\Method\AbstractMethod
     }
 
     /**
-     *
+     * 
      * @param \Magento\Payment\Model\InfoInterface $payment
      * @param float $amount
      * @return \Openpay\Banks\Model\Payment
      * @throws \Magento\Framework\Validator\Exception
      */
-    public function order(\Magento\Payment\Model\InfoInterface $payment, $amount) {
+    public function order(\Magento\Payment\Model\InfoInterface $payment, $amount) {        
         unset($_SESSION['openpay_pse_redirect_url']);
-
+        
         /**
-         * Magento utiliza el timezone UTC, por lo tanto sobreescribimos este
-         * por la configuración que se define en el administrador
+         * Magento utiliza el timezone UTC, por lo tanto sobreescribimos este 
+         * por la configuración que se define en el administrador         
          */
         $store_tz = $this->scope_config->getValue('general/locale/timezone');
         date_default_timezone_set($store_tz);
@@ -157,8 +160,8 @@ class Payment extends \Magento\Payment\Model\Method\AbstractMethod
 
         /** @var \Magento\Sales\Model\Order\Address $billing */
         $billing = $order->getBillingAddress();
-
-        $this->logger->debug('#order', array('$order_id' => $order->getIncrementId(), '$status' => $order->getStatus(), '$amount' => $amount));
+        
+        $this->logger->debug('#order', array('$order_id' => $order->getIncrementId(), '$status' => $order->getStatus(), '$amount' => $amount));        
 
         try {
 
@@ -168,14 +171,14 @@ class Payment extends \Magento\Payment\Model\Method\AbstractMethod
                 'phone_number' => $billing->getTelephone(),
                 'email' => $order->getCustomerEmail()
             );
-
+            
             if ($this->validateAddress($billing)) {
                 $customer_data = $this->formatAddress($customer_data, $billing);
-            }
-
-            $this->logger->debug('#order', array('$customer_data' => $customer_data));
-
+            }     
+            
+            $this->logger->debug('#order', array('$customer_data' => $customer_data));        
 
+            
             if ($this->country === 'MX') {
                 $due_date = date('Y-m-d\TH:i:s', strtotime('+ '.$this->deadline.' hours'));
 
@@ -189,58 +192,58 @@ class Payment extends \Magento\Payment\Model\Method\AbstractMethod
                     'customer' => $customer_data
                 );
             } elseif($this->country === 'CO') {
-                $base_url = $this->_storeManager->getStore()->getBaseUrl(\Magento\Framework\UrlInterface::URL_TYPE_WEB);  // URL de la tienda
-
+                $base_url = $this->_storeManager->getStore()->getBaseUrl(\Magento\Framework\UrlInterface::URL_TYPE_WEB);  // URL de la tienda   
+                
                 $charge_request = array(
                     'country' => 'COL',
                     'amount' => $amount,
                     'currency' => strtolower($order->getBaseCurrencyCode()),
                     'description' => sprintf('ORDER #%s, %s', $order->getIncrementId(), $order->getCustomerEmail()),
-                    'order_id' => $order->getIncrementId(),
+                    'order_id' => $order->getIncrementId(),                    
                     'customer' => $customer_data,
                     'iva' => $this->iva,
                     'redirect_url' => $base_url.'openpay/pse/confirm'
-                );
+                );                
             }
-
-            $this->logger->debug('#order', array('$charge_request' => $charge_request));
-
+            
+            $this->logger->debug('#order', array('$charge_request' => $charge_request));        
+            
             // Realiza la transacción en Openpay
-            $charge = $this->makeOpenpayCharge($customer_data, $charge_request);
+            $charge = $this->makeOpenpayCharge($customer_data, $charge_request);  
             $charge_id = '';
-
+            
             if ($charge->id) {
                 $charge_id = $charge->id;
             } elseif(!$charge->id && $charge->redirect_url) {
                 //$url_array = explode('/', $charge->redirect_url);
                 //$charge_id = $url_array[8];
             }
-
+                        
             $payment->setTransactionId($charge_id);
-
+            
             $openpayCustomerFactory = $this->customerSession->isLoggedIn() ? $this->hasOpenpayAccount($this->customerSession->getCustomer()->getId()) : null;
             $openpay_customer_id = $openpayCustomerFactory ? $openpayCustomerFactory->openpay_id : null;
-
+            
             // Actualiza el estado de la orden
             $state = \Magento\Sales\Model\Order::STATE_NEW;
             $order->setState($state)->setStatus($state);
-
+            
             // Registra el ID de la transacción de Openpay
             $order->setExtOrderId($charge_id);
             // Registra (si existe), el ID de Customer de Openpay
             $order->setExtCustomerId($openpay_customer_id);
-            $order->save();
-
+            $order->save();  
+            
             if ($this->country === 'MX') {
                 $pdf_url = $this->pdf_url_base.'/'.$this->merchant_id.'/'.$charge_id;
-                $_SESSION['pdf_url'] = $pdf_url;
+                $_SESSION['pdf_url'] = $pdf_url;            
 
                 $pdf_file = $this->handlePdf($pdf_url, $order->getIncrementId());
                 $this->sendEmail($pdf_file, $order);
             } elseif ($this->country === 'CO') {
                 $_SESSION['openpay_pse_redirect_url'] = $charge->redirect_url;
-            }
-
+            }           
+            
         } catch (\Exception $e) {
             $this->debugData(['exception' => $e->getMessage()]);
             $this->_logger->error(__( $e->getMessage()));
@@ -250,41 +253,46 @@ class Payment extends \Magento\Payment\Model\Method\AbstractMethod
         $payment->setSkipOrderProcessing(true);
         return $this;
     }
-
+    
     private function makeOpenpayCharge($customer_data, $charge_request) {
-        $openpay = $this->getOpenpayInstance();
+		if ($this->environmentConfig->isNonProduction() && isset($charge_request['order_id'])) {
+            $environmentNamePrefix = $this->environmentConfig->getEnvironmentName(true);
+            $charge_request['order_id'] = $environmentNamePrefix.''.$charge_request['order_id'];
+        }
+		
+        $openpay = $this->getOpenpayInstance();        
 
         // Cargo para usuarios "invitados"
-        if (!$this->customerSession->isLoggedIn() && $this->country === 'MX') {
+        if (!$this->customerSession->isLoggedIn() && $this->country === 'MX') {            
             return $openpay->charges->create($charge_request);
         } elseif (!$this->customerSession->isLoggedIn() && $this->country === 'CO') {
             return $openpay->pses->create($charge_request);
-        }
+        }        
 
         // Se remueve el atributo de "customer" porque ya esta relacionado con una cuenta en Openpay
-        unset($charge_request['customer']);
-
-        $openpay_customer = $this->retrieveOpenpayCustomerAccount($customer_data);
+        unset($charge_request['customer']); 
 
+        $openpay_customer = $this->retrieveOpenpayCustomerAccount($customer_data);    
+                
         try {
             // Cargo para usuarios con cuenta
-            if ($this->country === 'MX') {
-                return $openpay_customer->charges->create($charge_request);
+            if ($this->country === 'MX') {            
+                return $openpay_customer->charges->create($charge_request);            
             } elseif ($this->country === 'CO') {
-                $this->logger->debug('#makeOpenpayCharge', array('pse' => true));
-                return $openpay_customer->pses->create($charge_request);
-            }
-        } catch (\Exception $e) {
-            $this->logger->critical('#makeOpenpayCharge', array('error' => $e->getMessage()));
-            $this->logger->critical('#makeOpenpayCharge', array('getTraceAsString' => $e->getTraceAsString()));
+                $this->logger->debug('#makeOpenpayCharge', array('pse' => true));        
+                return $openpay_customer->pses->create($charge_request);            
+            }        
+        } catch (\Exception $e) {             
+            $this->logger->critical('#makeOpenpayCharge', array('error' => $e->getMessage()));   
+            $this->logger->critical('#makeOpenpayCharge', array('getTraceAsString' => $e->getTraceAsString()));   
             return false;
-        }
+        }        
     }
-
+    
     private function retrieveOpenpayCustomerAccount($customer_data) {
         try {
-            $customerId = $this->customerSession->getCustomer()->getId();
-
+            $customerId = $this->customerSession->getCustomer()->getId();                
+            
             $has_openpay_account = $this->hasOpenpayAccount($customerId);
             if ($has_openpay_account === false) {
                 $openpay_customer = $this->createOpenpayCustomer($customer_data);
@@ -297,59 +305,59 @@ class Payment extends \Magento\Payment\Model\Method\AbstractMethod
 
                 // Se guarda en BD la relación
                 $openpay_customer_local = $this->openpayCustomerFactory->create();
-                $openpay_customer_local->addData($data)->save();
+                $openpay_customer_local->addData($data)->save();                    
             } else {
                 $openpay_customer = $this->getOpenpayCustomer($has_openpay_account->openpay_id);
             }
-
+            
             return $openpay_customer;
         } catch (\Exception $e) {
             throw new \Magento\Framework\Validator\Exception(__($e->getMessage()));
         }
     }
-
+    
     private function createOpenpayCustomer($data) {
         try {
             $openpay = $this->getOpenpayInstance();
-            return $openpay->customers->add($data);
+            return $openpay->customers->add($data);            
         } catch (\Exception $e) {
             throw new \Magento\Framework\Validator\Exception(__($e->getMessage()));
-        }
+        }        
     }
-
-    private function hasOpenpayAccount($customer_id) {
+    
+    private function hasOpenpayAccount($customer_id) {        
         try {
             $openpay_customer_local = $this->openpayCustomerFactory->create();
             $response = $openpay_customer_local->fetchOneBy('customer_id', $customer_id);
             return $response;
         } catch (\Exception $e) {
             throw new \Magento\Framework\Validator\Exception(__($e->getMessage()));
-        }
+        }  
     }
-
+    
     public function getOpenpayCustomer($openpay_customer_id) {
         try {
             $openpay = $this->getOpenpayInstance();
-            return $openpay->customers->get($openpay_customer_id);
+            return $openpay->customers->get($openpay_customer_id);            
         } catch (\Exception $e) {
             throw new \Magento\Framework\Validator\Exception(__($e->getMessage()));
-        }
+        }        
     }
-
+    
     public function getOpenpayCharge($charge_id, $customer_id = null) {
-        try {
-            if ($customer_id === null) {
+        try {                        
+            if ($customer_id === null) {                
                 $openpay = $this->getOpenpayInstance();
                 return $openpay->charges->get($charge_id);
-            }
-
+            }            
+            
             $openpay_customer = $this->getOpenpayCustomer($customer_id);
-            return $openpay_customer->charges->get($charge_id);
+            return $openpay_customer->charges->get($charge_id);            
         } catch (\Exception $e) {
             throw new \Magento\Framework\Validator\Exception(__($e->getMessage()));
         }
     }
-
+    
     private function formatAddress($customer_data, $billing) {
         if ($this->country === 'MX') {
             $customer_data['address'] = array(
@@ -367,30 +375,30 @@ class Payment extends \Magento\Payment\Model\Method\AbstractMethod
                 'additional' => $billing->getStreetLine(1).' '.$billing->getStreetLine(2)
             );
         }
-
+        
         return $customer_data;
     }
-
+    
     public function sendEmail($pdf_file, $order) {
         $templateId = 'openpay_spei_pdf_template';
         $email = $this->scope_config->getValue('trans_email/ident_support/email',ScopeInterface::SCOPE_STORE);
         $name  = $this->scope_config->getValue('trans_email/ident_support/name',ScopeInterface::SCOPE_STORE);
         $pdf = file_get_contents($pdf_file);
         $toEmail = $order->getCustomerEmail();
-
-        try {
+            
+        try {    
             $template_vars = array(
                 'title' => 'Instrucciones de pago | Orden #'.$order->getIncrementId()
             );
             $storeId = $this->_storeManager->getStore()->getId();
             $from = array('email' => $email, 'name' => $name);
-
+            
             $templateOptions = array(
                 'area' => \Magento\Framework\App\Area::AREA_FRONTEND,
                 'store' => $storeId
             );
 
-            $this->logger->debug('#sendEmail', array('$pdf_path' => $pdf_file, '$from' => $from, '$toEmail' => $toEmail));
+            $this->logger->debug('#sendEmail', array('$pdf_path' => $pdf_file, '$from' => $from, '$toEmail' => $toEmail)); 
 
             $transportBuilderObj = $this->_transportBuilder
             ->setTemplateIdentifier($templateId)
@@ -403,22 +411,22 @@ class Payment extends \Magento\Payment\Model\Method\AbstractMethod
             $transportBuilderObj->sendMessage();
 
             return;
-        } catch (\Magento\Framework\Exception\MailException $me) {
-            $this->logger->error('#MailException', array('msg' => $me->getMessage()));
+        } catch (\Magento\Framework\Exception\MailException $me) {            
+            $this->logger->error('#MailException', array('msg' => $me->getMessage()));                    
             throw new \Magento\Framework\Exception\LocalizedException(__($me->getMessage()));
-        } catch (\Exception $e) {
-            $this->logger->error('#Exception', array('msg' => $e->getMessage()));
+        } catch (\Exception $e) {            
+            $this->logger->error('#Exception', array('msg' => $e->getMessage()));                    
             throw new \Magento\Framework\Exception\LocalizedException(__($e->getMessage()));
         }
-    }
-
+    }    
+    
     private function handlePdf($url, $order_id) {
         $pdfContent = file_get_contents($url);
         $filePath = "/openpay/attachments/";
         $pdfPath = $this->_directoryList->getPath('media') . $filePath;
         $ioAdapter = $this->_file;
-
-        if (!is_dir($pdfPath)) {
+        
+        if (!is_dir($pdfPath)) {            
             $ioAdapter->mkdir($pdfPath, 0775);
         }
 
@@ -428,26 +436,26 @@ class Payment extends \Magento\Payment\Model\Method\AbstractMethod
 
         return $pdfPath.$fileName;
     }
-
+    
     /**
      * Availability for currency
      *
      * @param string $currencyCode
      * @return bool
      */
-    public function canUseForCurrency($currencyCode) {
+    public function canUseForCurrency($currencyCode) {        
         if ($this->country === 'MX') {
             return in_array($currencyCode, $this->supported_currency_codes);
         } else if ($this->country === 'CO') {
             return $currencyCode == 'COP';
         }
-
+        
         return false;
     }
-
+    
     /**
      * Get $sk property
-     *
+     * 
      * @return string
      */
     public function getSecretKey() {
@@ -456,7 +464,7 @@ class Payment extends \Magento\Payment\Model\Method\AbstractMethod
 
     /**
      * Get $merchant_id property
-     *
+     * 
      * @return string
      */
     public function getMerchantId() {
@@ -465,7 +473,7 @@ class Payment extends \Magento\Payment\Model\Method\AbstractMethod
 
     /**
      * Get $is_sandbox property
-     *
+     * 
      * @return boolean
      */
     public function isSandbox() {
@@ -515,10 +523,11 @@ class Payment extends \Magento\Payment\Model\Method\AbstractMethod
      * @return mixed
      */
     public function createWebhook() {
-        $protocol = $this->hostSecure() === true ? 'https://' : 'http://';
-        $uri = $_SERVER['HTTP_HOST']."/openpay/index/webhook";
+        //$protocol = $this->hostSecure() === true ? 'https://' : 'http://';
+        $base_url = $this->_storeManager->getStore()->getBaseUrl(\Magento\Framework\UrlInterface::URL_TYPE_WEB);
+        $uri = $base_url."openpay/index/webhook";
         $webhook_data = array(
-            'url' => $protocol.$uri,
+            'url' => $uri,
             'event_types' => array(
                 'verification',
                 'charge.succeeded',
@@ -549,7 +558,7 @@ class Payment extends \Magento\Payment\Model\Method\AbstractMethod
             return $this->error($e);
         }
     }
-
+    
     /*
      * Validate if host is secure (SSL)
      */
@@ -560,10 +569,10 @@ class Payment extends \Magento\Payment\Model\Method\AbstractMethod
         } elseif (!empty($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] == 'https' || !empty($_SERVER['HTTP_X_FORWARDED_SSL']) && $_SERVER['HTTP_X_FORWARDED_SSL'] == 'on') {
             $is_secure = true;
         }
-
+        
         return $is_secure;
     }
-
+    
     public function getCountry() {
         return $this->country;
     }
@@ -585,10 +594,10 @@ class Payment extends \Magento\Payment\Model\Method\AbstractMethod
     public function getOpenpayInstance() {
         $openpay = \Openpay::getInstance($this->merchant_id, $this->sk, $this->country);
         \Openpay::setSandboxMode($this->is_sandbox);
-
+        
         $userAgent = "Openpay-MTO2".$this->country."/v2";
         \Openpay::setUserAgent($userAgent);
-
+        
         return $openpay;
     }
 
diff --git a/etc/frontend/di.xml b/etc/frontend/di.xml
index ee7aedc..b9ece55 100644
--- a/etc/frontend/di.xml
+++ b/etc/frontend/di.xml
@@ -10,7 +10,15 @@
  * @license     http://www.apache.org/licenses/LICENSE-2.0  Apache License Version 2.0
  */
 -->
-<config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:ObjectManager/etc/config.xsd">           
+<config xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="urn:magento:framework:ObjectManager/etc/config.xsd">
+
+    <virtualType name="Openpay\Banks\Model\ConfigProvider" type="Magento\Payment\Model\CcGenericConfigProvider">
+        <arguments>
+            <argument name="methodCodes" xsi:type="array">
+                <item name="openpay_banks" xsi:type="const">Openpay\Banks\Model\Payment::CODE</item>
+            </argument>
+        </arguments>
+    </virtualType>            
     <type name="Magento\Checkout\Model\CompositeConfigProvider">
         <arguments>
             <argument name="configProviders" xsi:type="array">
diff --git a/openpaybanks-fixes.patch b/openpaybanks-fixes.patch
index 96c935c..93b56ff 100644
--- a/openpaybanks-fixes.patch
+++ b/openpaybanks-fixes.patch
@@ -1,170 +0,0 @@
-diff --git a/Controller/Index/Webhook.php b/Controller/Index/Webhook.php
-index 300315b..104d692 100644
---- a/Controller/Index/Webhook.php
-+++ b/Controller/Index/Webhook.php
-@@ -83,10 +83,10 @@ class Webhook extends \Magento\Framework\App\Action\Action implements CsrfAwareA
-                     $invoice->register();
-                     $invoice->save();
-                     
--                }else if($json->type == 'transaction.expired' && $charge->status == 'cancelled'){
-+                } else if(($json->type == 'charge.failed' || $json->type == 'transaction.expired') && $charge->status == 'cancelled'){
-                     $status = \Magento\Sales\Model\Order::STATE_CANCELED;
-                     $order->setState($status)->setStatus($status);
--                    $order->addStatusHistoryComment("Pago vencido")->setIsCustomerNotified(true);            
-+                    $order->addStatusHistoryComment("Pago Cancelado")->setIsCustomerNotified(true);            
-                     $order->save();
-                 }  
-             }       
-diff --git a/Controller/Pse/Confirm.php b/Controller/Pse/Confirm.php
-index a0517dd..f9c96ff 100644
---- a/Controller/Pse/Confirm.php
-+++ b/Controller/Pse/Confirm.php
-@@ -89,47 +89,49 @@ class Confirm extends \Magento\Framework\App\Action\Action
-             }
-             
-             $this->logger->debug('#PSE', array('id' => $this->request->getParam('id'), 'status' => $charge->status));
--            if ($order && $charge->status != 'completed') {
--                $order->cancel();
--                $order->addStatusToHistory(\Magento\Sales\Model\Order::STATE_CANCELED, __('Autenticación de 3D Secure fallida.'));
--                $order->save();
--                $this->logger->debug('#PSE', array('msg' => 'Pago vía PSE fallido'));
--                                
--                return $this->resultPageFactory->create();        
--            }
--            
--            $status = \Magento\Sales\Model\Order::STATE_PROCESSING;            
--            $order->setExtOrderId($this->request->getParam('id')); // Registra el ID de la transacción de Openpay
--            $order->setState($status)->setStatus($status);
--            $order->setTotalPaid($charge->amount);  
--            $order->addStatusHistoryComment("Pago recibido exitosamente")->setIsCustomerNotified(true);            
--            $order->save();        
--            $requiresInvoice = true;
--            /** @var InvoiceCollection $invoiceCollection */
--            $invoiceCollection = $order->getInvoiceCollection();
--            if ( $invoiceCollection->count() > 0 ) {
--                /** @var Invoice $invoice */
--                foreach ($invoiceCollection as $invoice ) {
--                    if ( $invoice->getState() == Invoice::STATE_OPEN) {
--                        $invoice->setState(Invoice::STATE_PAID);
-+            if($order){
-+                if($charge->status == 'completed'){
-+                    $status = \Magento\Sales\Model\Order::STATE_PROCESSING;            
-+                    $order->setExtOrderId($this->request->getParam('id')); // Registra el ID de la transacción de Openpay
-+                    $order->setState($status)->setStatus($status);
-+                    $order->setTotalPaid($charge->amount);  
-+                    $order->addStatusHistoryComment("Pago recibido exitosamente")->setIsCustomerNotified(true);            
-+                    $order->save();        
-+                    $requiresInvoice = true;
-+                    /** @var InvoiceCollection $invoiceCollection */
-+                    $invoiceCollection = $order->getInvoiceCollection();
-+                    if ( $invoiceCollection->count() > 0 ) {
-+                        /** @var Invoice $invoice */
-+                        foreach ($invoiceCollection as $invoice ) {
-+                            if ( $invoice->getState() == Invoice::STATE_OPEN) {
-+                                $invoice->setState(Invoice::STATE_PAID);
-+                                $invoice->setTransactionId($charge->id);
-+                                $invoice->pay()->save();
-+                                $requiresInvoice = false;
-+                                break;
-+                            }
-+                        }
-+                    }
-+                    if ( $requiresInvoice ) {
-+                        $invoice = $this->_invoiceService->prepareInvoice($order);
-                         $invoice->setTransactionId($charge->id);
-+                        //$invoice->setRequestedCaptureCase(\Magento\Sales\Model\Order\Invoice::CAPTURE_ONLINE);
-+                        //$invoice->register();
-                         $invoice->pay()->save();
--                        $requiresInvoice = false;
--                        break;
-                     }
-+                    $payment = $order->getPayment();                                
-+                    $payment->setAmountPaid($charge->amount);
-+                    $payment->setIsTransactionPending(false);
-+                    $payment->save();
-+                } else if ($charge->status == 'cancelled' || $charge->status == 'failed') {
-+                    $order->cancel();
-+                    $order->addStatusToHistory(\Magento\Sales\Model\Order::STATE_CANCELED, __('Pago vía PSE fallido'));
-+                    $order->save();
-+                    $this->logger->debug('#PSE', array('msg' => 'Pago vía PSE fallido'));
-+                                    
-+                    return $this->resultPageFactory->create();        
-                 }
-             }
--            if ( $requiresInvoice ) {
--                $invoice = $this->_invoiceService->prepareInvoice($order);
--                $invoice->setTransactionId($charge->id);
--//            $invoice->setRequestedCaptureCase(\Magento\Sales\Model\Order\Invoice::CAPTURE_ONLINE);
--//            $invoice->register();
--                $invoice->pay()->save();
--            }
--            $payment = $order->getPayment();                                
--            $payment->setAmountPaid($charge->amount);
--            $payment->setIsTransactionPending(false);
--            $payment->save();
-             
-             $this->logger->debug('#PSE', array('redirect' => 'checkout/onepage/success'));
-             return $this->resultRedirectFactory->create()->setPath('checkout/onepage/success');
-diff --git a/Model/Payment.php b/Model/Payment.php
-index 4ab4251..96a37d6 100644
---- a/Model/Payment.php
-+++ b/Model/Payment.php
-@@ -12,6 +12,7 @@ namespace Openpay\Banks\Model;
- use Magento\Store\Model\ScopeInterface;
- use Magento\Customer\Model\Customer;
- use Magento\Customer\Model\Session as CustomerSession;
-+use BAT\Environment\Model\Config as EnvironmentConfig;
- 
- /**
-  * Class Payment
-@@ -52,6 +53,7 @@ class Payment extends \Magento\Payment\Model\Method\AbstractMethod
-     protected $_directoryList;
-     protected $_file;
-     protected $iva;
-+	private $environmentConfig;
- 
-     /**
-      * 
-@@ -74,6 +76,7 @@ class Payment extends \Magento\Payment\Model\Method\AbstractMethod
-      * @param array $data
-      */
-     public function __construct(
-+		EnvironmentConfig $environmentConfig,
-         \Magento\Framework\Model\Context $context, 
-         \Magento\Framework\Registry $registry,
-         \Magento\Framework\Api\ExtensionAttributesFactory $extensionFactory,
-@@ -105,7 +108,7 @@ class Payment extends \Magento\Payment\Model\Method\AbstractMethod
-             null,
-             $data
-         );
--        
-+        $this->environmentConfig = $environmentConfig;
-         $this->customerModel = $customerModel;
-         $this->customerSession = $customerSession;
-         $this->openpayCustomerFactory = $openpayCustomerFactory;
-@@ -251,7 +254,12 @@ class Payment extends \Magento\Payment\Model\Method\AbstractMethod
-         return $this;
-     }
-     
--    private function makeOpenpayCharge($customer_data, $charge_request) {        
-+    private function makeOpenpayCharge($customer_data, $charge_request) {
-+		if ($this->environmentConfig->isNonProduction() && isset($charge_request['order_id'])) {
-+            $environmentNamePrefix = $this->environmentConfig->getEnvironmentName(true);
-+            $charge_request['order_id'] = $environmentNamePrefix.''.$charge_request['order_id'];
-+        }
-+		
-         $openpay = $this->getOpenpayInstance();        
- 
-         // Cargo para usuarios "invitados"
-@@ -515,8 +523,9 @@ class Payment extends \Magento\Payment\Model\Method\AbstractMethod
-      * @return mixed
-      */
-     public function createWebhook() {
--        $protocol = $this->hostSecure() === true ? 'https://' : 'http://';
--        $uri = $_SERVER['HTTP_HOST']."/openpay/index/webhook";
-+        //$protocol = $this->hostSecure() === true ? 'https://' : 'http://';
-+        $base_url = $this->_storeManager->getStore()->getBaseUrl(\Magento\Framework\UrlInterface::URL_TYPE_WEB);
-+        $uri = $base_url."openpay/index/webhook";
-         $webhook_data = array(
-             'url' => $protocol.$uri,
-             'event_types' => array(
